{"version":3,"sources":["scripts/reducers/data.js","scripts/reducers/guide.js","scripts/reducers/foot.js","scripts/reducers/index.js","scripts/store.js","scripts/view/index.js","scripts/index.js","App.js","serviceWorker.js","index.js","utils/lazyload.js"],"names":["defaultState","immutable","fromJS","banner","flag","sessionStorage","tele","mobile","code","pic","tabs","title","disTime","data","reducers","combineReducers","state","action","type","set","payload","time","update","x","foot","store","createStore","applyMiddleware","thunk","promise","MainLayout","className","path","exact","render","to","component","LazyLoad","Component","MainRouter","basename","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","loadingToast","Toast","loading","console","log","ToastExample","setTimeout","hide","onClick","React","loader","Loadable"],"mappings":"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","file":"static/js/main.38d7f7f7.chunk.js","sourcesContent":["import immutable from \"immutable\"\r\n\r\nconst defaultState = immutable.fromJS({\r\n    banner: [\r\n        \"http://img.cmvideo.cn:8080/publish/noms/2020/01/07/1O24514L11GGE.jpg\",\r\n        \"http://img.cmvideo.cn:8080/publish/noms/2020/01/07/1O2451D8O2HAE.jpg\",\r\n        \"http://img.cmvideo.cn:8080/publish/noms/2020/01/07/1O24514MJCLGN.jpg\",\r\n        \"http://img.cmvideo.cn:8080/publish/noms/2020/01/07/1O24514N3TTPI.jpg\"\r\n        // require(\"@/assets/images/banner1.jpg\"),\r\n        // require(\"@/assets/images/banner2.jpg\"),\r\n        // require(\"@/assets/images/banner3.jpg\"),\r\n        // require(\"@/assets/images/banner4.jpg\"),\r\n    ],\r\n    flag: !!sessionStorage.tele,\r\n    mobile: \"\",\r\n    code: \"\",\r\n    pic: \"http://img.cmvideo.cn:8080/publish/voms2/uic_service/picture/userImage/543/626/5181.jpg\",\r\n    tabs: [\r\n        { title: '精选' },\r\n        { title: '庆余年' },\r\n        { title: '热点' },\r\n        { title: '电视剧' },\r\n        { title: '电影' },\r\n        { title: '综艺' },\r\n        { title: '直播' },\r\n        { title: 'PP体育' },\r\n        { title: '湖北' },\r\n        { title: '儿童' },\r\n        { title: '纪实' },\r\n        { title: '娱乐*音乐' },\r\n        { title: '资讯*军事' },\r\n        { title: '生活*搞笑' },\r\n        { title: '知识*动漫' },\r\n    ]\r\n})\r\n\r\nexport const data = (state = defaultState, action) => {\r\n    // console.log(action)\r\n    switch (action.type) {\r\n\r\n        case \"getCode\":\r\n            return state.set(\"code\", action.payload)\r\n\r\n        case \"changeFlag\":\r\n            return state.set(\"flag\", action.payload)\r\n\r\n        case \"changeMobile\":\r\n            return state.set(\"mobile\", action.payload)\r\n\r\n        case \"changeHead\":\r\n            return state.set(\"pic\", action.payload)\r\n            // var obj = { ...state.toJS(), ...action.payload };\r\n            // return immutable.fromJS(obj);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import immutable from \"immutable\"\r\n\r\nconst defaultState = immutable.fromJS({\r\n    disTime: 5\r\n})\r\n\r\nexport const time = (state = defaultState, action) => {\r\n    // console.log(action)\r\n    switch (action.type) {\r\n        case \"changeTime\":\r\n            return state.update(\"disTime\", x => x - 1);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import immutable from \"immutable\"\r\n\r\nconst defaultState = immutable.fromJS({\r\n    data: []\r\n})\r\n\r\nexport const foot = (state = defaultState, action) => {\r\n    // console.log(action.payload)\r\n    switch (action.type) {\r\n        case \"getFoot\":\r\n            return state.set(\"data\", action.payload);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers}from \"redux-immutable\"\r\nimport {data} from \"./data\";\r\nimport {time} from \"./guide\";\r\nimport {foot} from  \"./foot\";\r\n\r\nexport const reducers =combineReducers({\r\n    data:data,\r\n    time:time,\r\n    foot:foot,\r\n})","import {createStore,applyMiddleware} from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport promise from \"redux-promise\"\r\nimport { reducers } from \"./reducers\";\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunk,promise));\r\n\r\nexport default store;","import React,{Component} from \"react\"\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\"\r\n// import Main from \"./main\"\r\nimport LazyLoad from \"&/lazyload\";\r\nexport default class MainLayout extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={()=><Redirect to=\"/guide\"/>}/>\r\n                    <Route path=\"/main\" component={LazyLoad(()=>import(\"./main\"))}/>\r\n                    <Route path=\"/guide\" component={LazyLoad(()=>import(\"./guide\"))}/>\r\n                    <Route path=\"/login\" component={LazyLoad(()=>import(\"./login\"))}/>\r\n                    <Route path=\"/detail\" component={LazyLoad(()=>import(\"./detail\"))}/>\r\n                    <Route path=\"/search\" component={LazyLoad(()=>import(\"./search\"))}/>\r\n                    <Route render={()=><Redirect to=\"/guide\"/>}/>\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport {\r\n    HashRouter as Hash,\r\n    // Route,\r\n} from \"react-router-dom\";\r\nimport store from \"./store\"\r\nimport { Provider } from \"react-redux\"\r\nimport MainLayout from \"./view\"\r\n\r\nexport class MainRouter extends Component {\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <Hash basename=\"\">\r\n                    <MainLayout />\r\n                </Hash>\r\n            </Provider>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { MainRouter } from \"~\"\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"@/styles/index.scss\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","//路由懒加载\r\nimport React from \"react\";\r\nimport Loadable from \"react-loadable\"\r\nimport { Toast, Button } from \"antd-mobile\"\r\n\r\n\r\nfunction loadingToast() {\r\n    Toast.loading('Loading...', 1, () => {\r\n        console.log('Load complete !!!');\r\n    });\r\n}\r\n\r\nclass ToastExample extends React.Component {\r\n    componentDidMount() {\r\n        Toast.loading('Loading...', 30, () => {\r\n            console.log('Load complete !!!');\r\n        });\r\n        setTimeout(() => {\r\n            Toast.hide();\r\n        }, 500);\r\n    }\r\n    render() {\r\n        return (\r\n            <Button onClick={loadingToast}>loading</Button>\r\n        );\r\n    }\r\n}\r\n//loading组件通用的 如果传入loading,有动画\r\nexport default (loader, loading = ToastExample) => {\r\n    return Loadable({\r\n        loader,     //需要懒加载的组件\r\n        loading\r\n    })\r\n}"],"sourceRoot":""}